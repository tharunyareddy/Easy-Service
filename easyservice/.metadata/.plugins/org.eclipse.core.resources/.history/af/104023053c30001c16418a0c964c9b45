package com.easyservice.service;

import java.time.LocalDate;
import java.util.List;

import javax.transaction.Transactional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import com.easyservice.exception.TaskNotFoundException;
import com.easyservice.exception.WorkerNotFoundException;
import com.easyservice.model.Status;
import com.easyservice.model.Task;
import com.easyservice.model.Worker;
import com.easyservice.repository.ITaskRepository;

@Service
@Transactional
public class TaskServiceImpl implements ITaskService {

	@Autowired
	RestTemplate restTemplate;

	private static final String BASEURL = "http://localhost:8073/work-service/work";

	@Autowired
	ITaskRepository taskRepository;

	@Override
	public Task addTask(Task task) {
		return taskRepository.save(task);

	}

	@Override
	public void deleteTask(int taskId) {
		taskRepository.deleteById(taskId);

	}

	@Override
	public void updateTask(Task task) {
		taskRepository.save(task);

	}

	@Override
	public Task getById(int taskId) {
		return taskRepository.findById(taskId).orElseThrow(() -> new TaskNotFoundException("Task Id not Found"));
	}

	@Override
	public List<Task> getAllTask() {
		return taskRepository.findAll();
	}

	@Override
	public void assignTaskToWorker(int taskId, int workerId) {
		taskRepository.updateStatus("NA", workerId);
		taskRepository.assignTask(taskId, workerId);

	}

	@Override
	public Task getByMaintenanceId(int maintenanceId) throws WorkerNotFoundException{
		Task taskByMaintenanceId= taskRepository.findByMaintenanceId(maintenanceId);
		if(taskByMaintenanceId==null) {
			throw new WorkerNotFoundException("Id Not Found");
		}
		return taskByMaintenanceId;

	}

	@Override
	public Task getByOrganiserAndStatus(String organiser, Status status) throws TaskNotFoundException {
		Task taskByOrganiserAndStatus=taskRepository.findByOrganiserAndTStatus(organiser, status);
		if(taskByOrganiserAndStatus==null) {
			throw new TaskNotFoundException("Organiser Not Found");
		}
		return taskByOrganiserAndStatus;
	}

	@Override
	public List<Task> getByTaskStartDateAndEndDate(LocalDate startDate, LocalDate endDate)  throws TaskNotFoundException{
		List<Task> taskByTaskStartDateAndEndDate= taskRepository.findByTaskStartDateAndEndDate(startDate, endDate);
		if(taskByTaskStartDateAndEndDate.isEmpty()) {
			throw new TaskNotFoundException("Organiser Not Found");
		}
		return taskByTaskStartDateAndEndDate;
	}

	@Override
	public int updateStatus(String value, int workerId) {
		return taskRepository.updateStatus(value, workerId);
	}
	
	
	//Worker Table
	
	@Override
	public Worker getByWorkerName(String workerName) {
		String url = BASEURL + "/workerName/" + workerName;
		Worker worker=restTemplate.getForEntity(url, Worker.class).getBody();
		return worker;
	}

	@Override
	public Worker getByStatusAndWorkType(String status, String workType) {
		String url = BASEURL + "/status/" + status + "/workType/" + workType;
		Worker worker=restTemplate.getForEntity(url, Worker.class).getBody();
		return worker;
	}

	@Override
	public Worker getByDurationAndWorkType(int workDuration, String workType)  {
		String url = BASEURL + "/workDuration/" + workDuration + "/workType/" + workType;
		Worker worker=restTemplate.getForEntity(url, Worker.class).getBody();
		return worker;
	}

	@Override
	public List<Worker> allWorkerList() {
		String url = BASEURL;
		List<Worker> allWorkerList=restTemplate.getForEntity(url,List.class).getBody();
		return allWorkerList;
	}

	@Override
	public List<Worker> getByAvailability(String availability) throws WorkerNotFoundException {
		String url = BASEURL + "/avl/" +availability;
		List<Worker> allAvailableWorkerList=restTemplate.getForEntity(url,List.class).getBody();
		return allAvailableWorkerList;
	}

	@Override
	public void unAssignTask(String value, int taskId, int workerId) throws WorkerNotFoundException {
		taskRepository.unAssignTasks("A",0, workerId);
		
	}

	@Override
	public Worker getByWorkerId(int workerId) throws WorkerNotFoundException {
		String url = BASEURL +"/"+ workerId;
		Worker workerById=restTemplate.getForEntity(url, Worker.class).getBody();
		return workerById;
	}

	@Override
	public int assignWorkToWorker(int taskId,int workerId) {
		Task task=new Task();
		task.setTaskId(taskId);
		String urlWorkerId = BASEURL+"/"+workerId;
		Worker workerById=restTemplate.getForEntity(urlWorkerId,Worker.class).getBody();
		workerById.setWStatus("NA");
		workerById.setTask(task);
		
		return 0;
	}

}
